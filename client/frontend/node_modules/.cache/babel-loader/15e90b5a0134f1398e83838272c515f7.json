{"ast":null,"code":"var _jsxFileName = \"/Users/alan/projects/back-end/web-chat/client/frontend/src/components/SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Box, Text, IconButton, Spinner, FormControl, Input, useToast } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { ChevronLeftIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animation/typing.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:3001/\";\nlet socket, selectedChatCompare;\n\nconst SingleChat = _ref => {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notification,\n    setNotification\n  } = ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    socket = io.connect(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message received\", newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]); // setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        setNewMessage(\"\");\n        setMessages([...messages, data]);\n        socket.emit(\"new message\", data);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"warning\",\n          duration: 4000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n\n  const typingHandler = event => {\n    setNewMessage(event.target.value); //Typing Indicator Logic\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    let timerLength = 3000;\n    setTimeout(() => {\n      let timeNow = new Date().getTime();\n      let timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          isRequired: true,\n          mt: 3,\n          children: [isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Lottie, {\n              options: defaultOptions,\n              width: 70,\n              style: {\n                marginBottom: 15,\n                marginLeft: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            onChange: typingHandler,\n            value: newMessage || \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleChat, \"MicE+3vVo3CPnMPVnswU5l0WM1I=\", false, function () {\n  return [useToast];\n});\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","useState","Box","Text","IconButton","Spinner","FormControl","Input","useToast","ChatState","ChevronLeftIcon","getSender","getSenderFull","ProfileModal","UpdateGroupChatModal","axios","ScrollableChat","io","Lottie","animationData","ENDPOINT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","user","selectedChat","setSelectedChat","notification","setNotification","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","connect","on","newMessageRecieved","chat","includes","sendMessage","event","key","post","content","chatId","typingHandler","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","base","md","isGroupChat","users","chatName","toUpperCase","marginBottom","marginLeft"],"sources":["/Users/alan/projects/back-end/web-chat/client/frontend/src/components/SingleChat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Text,\n  IconButton,\n  Spinner,\n  FormControl,\n  Input,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { ChevronLeftIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animation/typing.json\";\n\nconst ENDPOINT = \"http://localhost:3001/\";\nlet socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const { user, selectedChat, setSelectedChat, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    socket = io.connect(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message received\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare ||\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          // setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat._id,\n          },\n          config\n        );\n\n        setNewMessage(\"\");\n        setMessages([...messages, data]);\n        socket.emit(\"new message\", data);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"warning\",\n          duration: 4000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  const typingHandler = (event) => {\n    setNewMessage(event.target.value);\n\n    //Typing Indicator Logic\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    let timerLength = 3000;\n    setTimeout(() => {\n      let timeNow = new Date().getTime();\n      let timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              icon={<ChevronLeftIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {!selectedChat.isGroupChat ? (\n              <>\n                {getSender(user, selectedChat.users)}\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\n              </>\n            ) : (\n              <>\n                {selectedChat.chatName.toUpperCase()}\n                <UpdateGroupChatModal\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                />\n              </>\n            )}\n          </Text>\n          <Box\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n            <FormControl onKeyDown={sendMessage} isRequired mt={3}>\n              {isTyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                onChange={typingHandler}\n                value={newMessage || \"\"}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}